// Pseudo code: print path source to destination if there is no negative cycle else print the negative cycle path.

Input -> A weighted graph & a src node (can contain negative cycle) & dst_node 
Output -> Shortest distance from src node to all other nodes

n -> number of nodes in graph
m => number of edges in graph

time complexity -> O(n*m)
space complexity -> O(n)

/*
Formula of node relaxation

if u ----> v (edge u to v)

if(distance[u] + cost(weight, v) < distance[v]){
    => distance[v] =  distance[u] + cost(weight, v)
}
*/

- create a distance array "d" with all values to infinity
- create a parent array
- d[src] = 0

- negative_cycle = false
- last_updated_node = -1

for i = 1 to n:
    - for all edges e(u,v,w):
        - if d[u] + w < d[v]:
            d[v] = d[u]+w
            parent[v] = u 
            - if i == n:
                negative_cycle = true 
                last_updated_node = v 

- if negative_cycle == false
    - print the distance array "d"
    - selected_node = dst_node

    - declare a vector path 

    -while true:
        - path.push_back(selected_node)
        - if selected_node == src:
            break
        - selected_node - parent[selected_node]
    - reverse the vector path 
    - print the path 

else:
    - print negative cycle exist
    - selected_node = last_updated_node
    - for i = 1 t0 n-1:
        - selected_node = parent[selected_node]
    
    - first_node = selected_node
    - declare a vector "cycle"

    -cycle.push_back(selected_node)
    while true:
        - selected_node = parent[selected_node]
        - cycle.push_back(selected_node)
        if selected_node == first_node:
            break
        
        - reverse the "cycle" vector
        - print the cycle path 
        